<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"								
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
						">
	<tx:annotation-driven/>			<!-- 트랜잭션 어노테이션 / 트랜잭션 애노테이션 사용을 위한 설정 -->
	<context:annotation-config />	<!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기를 등록 -->
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/springbook?serverTimezone=UTC"></property>
		<property name="username" value="spring"></property>
		<property name="password" value="book"></property>
	</bean>
	
	<bean id="userDao" class="springbook.user.dao.UserDaoJdbc" >
		<property name="dataSource" ref="dataSource" />
		<property name="sqlService" ref="sqlService" />
	</bean>
	
	<bean id="sqlService" class="springbook.user.sqlservice.XmlSqlService">
		<property name="sqlmapFile" value="sqlmap.xml" />
	</bean>
	
	<bean id="mailSender" class="springbook.user.service.DummyMailSender" />
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 유저 서비스 빈 -->
	<bean id="userService" class="springbook.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="mailSender" ref="mailSender" />
	</bean>
	
	<!-- 테스트 유저 서비스 빈 (예외발생) $:스태틱멤버클래스, parent:프로퍼티 정의를 포함한 빈의 설정 상속-->
	<bean id="testUserService" class="springbook.user.service.UserServiceTest$TestUserServiceImpl" parent="userService" />
	
	<!-- 어드바이스 리스트 6-80 tx스키마의 태그를 이용한 트랜잭션 어드바이스 정의 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">	<!-- bean이름이 'transactionManager'이면 transaction-manager="transactionManager"는 생략 가능 -->
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	 
	<!-- 포인트컷(표현식 적용)
	<bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))" />
	</bean>
	-->
	 
	<!-- 어드바이스 + 포인트컷 = 어드바이저
	<bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="transactionAdvice" />
		<property name="pointcut" ref="transactionPointcut" />
	</bean>
	-->
	 
	<!-- 어드바이저를 이용하는 자동 프록시 생성기
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
	-->
	 
	<!-- aop 네임스페이스를 적용한 AOP 설정 빈 -->
	<aop:config>	<!-- AOP설정을 담는 부모 태그다. 필요에 따라 AspectJAdvisorAutoProxyCreator를 빈으로 등록해준다. -->
		<!-- <aop:pointcut expression="execution(* *..*ServiceImpl.*(..))" id="transactionPointcut"/> -->
		<aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/>
		<!-- advice와 pointcut의 ref를 프로퍼티로 갖는 DefaultBeanFactoryPointcutAdvisor를 등록해준다. -->
	</aop:config>
	
</beans>
