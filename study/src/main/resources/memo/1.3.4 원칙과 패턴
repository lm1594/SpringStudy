초난감 DAO 코드를 개선해온 결과를 객체지향 기술의 여러 가지 이론을 통해 설명 ★

1. 개방 폐쇄 원칙
	설명 : 깔끔한 설계를 위해 적용 가능한 객체지향 설계 원칙 중의 하나
	정의 : 클래스나 모듈은 확장에는 열려 있어야 하고 변경에는 닫혀있어야 한다.
	-> UserDao는 DB 연결 방법이라는 기능을 확장하는 데는 열려있다. UserDao에 전혀 영향을 주지 않고도 얼마든지 기능을 확장할 수 있게 되어 있다. 
	-> 동시에 UserDao 자신의 핵심 기능을 구현한 코드는 그런 변화에 영향을 받지 않고 유지 할 수 있으므로 변경에는 닫혀 있다.

객체지향 설계원칙 5가지 (SOLID) ★
SOLID는 아래 5가지 원칙의 첫 글자를 따서 만든 단어다.
 - SRP(The Single Responsibility Principle) : 단일 책임 원칙
 - OCP(The Open Closed Principl) : 개방 폐쇄 원칙
 - LSP(The Liskov Substitution Principle) : 리스코프 치환 원칙
 - ISP(The Interface Segregation Principle) : 인터페이스 분리 원칙
 - DIP(The Dependency Inversion Principle) : 의존관계 역전 원칙
 

2. 높은 응집도와 낮은 결합도
	- 높은응집도
		: 하나의 모듈, 클래스가 하나의 책임 또는 관심사에만 집중되어 있다는 뜻이다. 불필요하거나 직접 관련이 없는 외부의 관심과 책임이 얽혀 있지 않으며 하나의 공통 관심사는 한 클래스에 모여있다.
		: 변화가 일어날 때 해당 모듈에서 변하는 부분이 크다.
		-> 변경이 일어날 때 모듈의 많은 부분이 함께 바뀐다면 응집도가 높다.
		-> 기능을 분리해서 응집도를 높이면 프로그램 변경 시 영향도 파악이 쉽다.
	
	- 낮은 결합도
		: 낮은 결합도는 높은 응집도보다 더 민감한 원칙이다.
		: 책임과 관심사가 다른 오브젝트 또는 모듈과는 낮은 결합도, 즉 느슨하게 연결된 형태를 유지하는 것이 바람직하다.
		: 느슨한 연결은 관계를 유지하는 데 꼭 필요한 최소한의 방법만 간접적인 형태로 제공하고, 나머지는 서로 독립적이고 알 필요도 없게 만들어주는 것이다.
		: 결합도가 낮아지면 변화에 대응하는 속도가 높아지고, 구성이 깔끔해진다. 또한 확장하기에도 매우 편리하다.
		결합도란?
			'하나의 오브젝트가 변경이 일어날 때에 관계를 맺고 있는 다른 오브젝트에게 변화를 요구하는 정도'
		
3. 전략 패턴 Strategy Pattern
	- UserDaoTest - UserDao - ConnectionMaker 구조
	정의 : 자신의 기능 맥락(context)에서, 필요에 따라 변경이 필요한 알고리즘을 인터페이스를 통해 통째로 외부로 분리시키고
		, 이를 구현한 구체적인 알고리즘 클래스를 필요에 따라 바꿔서 사용할 수 있게하는 디자인 패턴
	- UserDao : 전략 패턴의 컨텍스트
	- ConnectionMaker : 인터페이스
	- UserDaoTest : 구현한 클래스
		-> 전략을 바꿔가면서 사용할 수 있게 분리
		
스프링이란★
	-> 객체지향적 설계 원칙과 디자인 패턴에 나타난 장점을 자연스럽게 개발자들이 활용할 수 있게 해주는 프레임워크