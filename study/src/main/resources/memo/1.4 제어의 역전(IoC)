IoC : Inversion of Control 제어의 역전
	-> 간단히 프로그램의 제어 흐름 구조가 뒤바뀌는 것

 일반적으로 프로그램의 흐름은 main() 메소드와 같이 프로그램이 시작되는 지점 에서 다음에 사용할 오브젝트를 결정하고, 결정한 오브젝트를 생성하고, 만들어진 오브젝트에 있는 
 메소드를 호출하고, 그 오브젝트 메소드 안에서 다음에 사용할 것을 결정하고 호출하는 식의 작업이 반복된다. 
  이런 프로그램 구조에서 각 오브젝트는 프로그램 흐름을 결정하거나 사용할 오브젝트를 구성하는 작업에 능동적으로 참여한다. 
 초기 UserDao를 보면 테스트용 main() 메소드는 UserDao 클래스의 오브젝트를 직접 생성하고, 만들어진 오브젝트의 메소드를 사용한다. UserDao 또한 자신이 사용할 
ConnectionMaker의 구현 클래스를 자신이 결정하고, 그 오브젝트를필요한 시점에서 생성해두고, 각 메소드에서 이를 사용한다. 모든 오브젝트가 능동적으로 자신이 사용할 
클래스를 결정하고, 언제 어떻게 그 오브젝트를 만들지를 스스로 관장한다.
	-> 모든 종류의 작업을 사용하는 쪽에서 제어하는 구조!!!!!

제어의 역전이란 이런 제어 흐름의 개념을 거꾸로 뒤집는 것★★
	-> 제어의 역전에서는 오브젝트가 자신이 사용할 오브젝트를 스스로 선택하지 않는다.
	-> 생성하지도 않는다.
	-> 또 자신이 어떻게 만들어지고 어디서 사용되는지를 알 수 없다.
	-> 모든 제어의 권한을 자신이 아닌 다른 대상에게 위임한다.
	: 프로그램의 시작을 담당하는 main()과 같은 엔트리 포인트를 제외하면
	모든 오브젝트는 이렇게 위임받은 제어 권한을 갖는 특별한 오브젝트에 의해 결정되고 만들어진다.
	예시) 서블릿, 프레임워크