5장 서비스 추상화 - 5.2 트랜잭션 서비스 추상화 - 5.2.4 트랜잭션 서비스 추상화

글로벌 트랜잭션 (global Transaction)
 한 개 이상의 DB로의 작업을 하나의 트랜잭션으로 만드는 건 JDBC의 Connection을 이용한 트랜잭션 방식인 로컬 트랜잭션(Local Transaction)으로는 불가능하다.
왜냐하면 로컬 트랜잭션은 하나의 DB Connection에 종속되기 때문이다.

 따라서, 각 DB와 독립적으로 만들어지는 Connection을 통해서가 아니라, 별도의 트랜잭션 관리자를 통해 트랜잭션을 관리하는 글로벌 트랜잭션(global Transaction)
방식을 사용해야 한다. 글로벌 트랜잭션을 적용해야 트랜잭션 매니저를 통해 여러 개의 DB가 참여하는 작업을 하나의 트랜잭션으로 만들 수 있다. 또 JMS(메세지서비스)와 같은 트랜잭션 기능을
지원하는 서비스도 트랜잭션에 참여시킬 수 있다.

 자바는 JDBC 외에 이런 글로벌 트랜잭션을 지원하는 트랜잭션 매니저를 지원하기 위한 API인 JTA(JAVA TRANSACTION API)를 제공하고 있다.
 
JTA를 이용한 전형적인 구조는 아래와 같다

[JTA를 이용한 트랜잭션 코드 구조]

// JNDI를 이용해 서버의 UserTransaction 오브젝트를 가져온다.
InitialContext ctx = new InitialContext();
UserTransaction tx = new (UserTransaction)ctx.lookup(USER_TX_JNDI_NAME);

tx.begin();
Connection c = dataSource.getConnection();		// JNDI로 가져온 dataSource를 사용해야 한다.
try {
	// 데이터 액세스 코드
	tx.commit();
}catch(Exception e) {
	tx.rollback();
	throw e;
}finally {
	c.close();
}


-------------------------------------------------------------------------------
문제점
 문제는 JDBC 로컬 트랜잭션을 JTA를 이용하는 글로벌 트랜잭션으로 바꾸려면 UserService의 코드를 수정해야 한다는 점이다. 로컬 트랜잭션을 사용하면 충분한
고객을 위해서는 JDBC를 이용한 트랜잭션 관리 코드를, G사처럼 다중 DB를 위한 글로벌 트랜잭션을 필요로 하는 곳을 위해서는 JTA를 이용한 트랜잭션 관리 코드를 적용해야 한다는
문제가 생긴다.

 또한 하이버네이트를 이용한 트랜잭션 관리 코드는 JDBC나 JTA의 코드와는 또 다른다는 것이다. 하이버네이트는 Connection을 직접 사용하지 않고 Session이라는 것을 사용하고,
독자적인 트랜잭션 관리 API를 사용한다. 그렇다면 이번엔 UserService를 하이버네이트의 Session과 Transaction 오브젝트를 사용하는 트랜잭션 경계설정 코드로 변경할 수 밖에 없게 된다.

[스프링의 트랜잭션 서비스 추상화]
 스프링은 트랜잭션 기술의 공통점을 담은 트랜잭션 추상화 기술을 제공하고 있다. 이를 이용하면 애플리케이션에서 직접 각 기술의 트랜잭션 API를 이용하지 않고도, 일관된
방식으로 트랜잭션을 제어하는 트랜잭션 경계설정 작업이 가능해진다.

 스프링이 제공하는 트랜잭션 추상화 방법을 UserService에 적용해보면 아래와 같은 코드로 만들수 있다.
 
-- 스프링의 트랜잭션 추상화 API를 적용한 upgradeLevels()

public void upgradeLevels() {
	PlatformTransactionManager transactionManager = 
					new DataSourceTransactionManager(dataSource);		//JDBC 트랜잭션 추상 오브젝트 생성
	// 트랜잭션 시작
	TransactionStatus status = 
				transactionManager.getTransaction(new DefaultTransactionDefinition());
	
	try {
		// 트랜잭션안에서 진행되는 작업
		List<User> users = userDao.getAll();
		for(User user : users) {
			if(canUpgradeLevel(user)) {
				upgradeLevel(user);
			}
		}
		transactionManager.commit(status);					// 트랜잭션 커밋
	}catch (RuntimeException e) {
		transactionManager.rollback(status);			// 트랜잭션 롤백
		throw e;
	}
	
}